'use server'

import { revalidateTag } from 'next/cache'
import { CACHE_TAGS } from '@/lib/utils/cache'
import { caseStudyService } from '@/lib/services/case-study.service'
import logger from '@/lib/logger'
import { CaseStudyCreateInput, CaseStudyUpdateInput } from '@/lib/repositories/caseStudy.repository'; // Import input types
import { Locale } from '@/i18n'; // Correct import for Locale





export async function createCaseStudyAction(data: CaseStudyCreateInput, locale: Locale) {
  try {
    console.log('Processing case study creation:', {
      locale,
      inputData: data // Log raw input
    });

    // ID is generated by Prisma, remove manual generation

    // Pass data directly to the service
    const newCaseStudy = await caseStudyService.createCaseStudy(
      data, // Data should now match CaseStudyCreateInput
      locale
    );

    // Revalidate cache
    revalidateTag(CACHE_TAGS.CASE_STUDIES)

    return { success: true, data: newCaseStudy }
  } catch (error) {
    logger.log('Error creating case study:', error)
    throw new Error(`Failed to create case study: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}
export async function updateCaseStudyAction(id: string, data: CaseStudyUpdateInput, locale: Locale) {
  try {
    console.log('Processing case study update:', {
      id,
      locale,
      updateData: data // Log raw update data
    });

    const updatedCaseStudy = await caseStudyService.updateCaseStudy(
      id,
      data, // Pass data directly, should match CaseStudyUpdateInput
      locale
    );

    console.log('updatedCaseStudy after response', updatedCaseStudy);

    // Revalidate cache
    revalidateTag(CACHE_TAGS.CASE_STUDIES);

    return { success: true, data: updatedCaseStudy };
  } catch (error) {
    logger.log('Error updating case study:', error);
    throw new Error(`Failed to update case study: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


export async function deleteCaseStudyAction(id: string, locale: Locale) {
  try {
    console.log('Processing case study deletion:', { id, locale })

    await caseStudyService.deleteCaseStudy(id, locale)

    // Revalidate cache
    revalidateTag(CACHE_TAGS.CASE_STUDIES)

    return { success: true }
  } catch (error) {
    logger.log('Error deleting case study:', error)
    throw new Error(`Failed to delete case study: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

export async function updateCaseStudyOrderAction(orders: Array<{ id: string, order: number }>, locale: Locale) {
  try {
    console.log('Processing case study order update:', { orders, locale })

    await caseStudyService.updateCaseStudyOrder(orders, locale)

    // Revalidate cache
    revalidateTag(CACHE_TAGS.CASE_STUDIES)

    return { success: true }
  } catch (error) {
    logger.log('Error updating case study order:', error)
    throw new Error(`Failed to update case study order: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

export async function getCaseStudiesAction(locale: Locale) {
  try {
    const caseStudies = await caseStudyService.getCaseStudies(locale)
    return { success: true, data: caseStudies }
  } catch (error) {
    logger.log('Error fetching case studies:', error)
    throw new Error(`Failed to fetch case studies: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

export async function getCaseStudyByIdAction(id: string, locale: Locale) {
  try {
    const caseStudy = await caseStudyService.getCaseStudyById(id, locale)
    return { success: true, data: caseStudy }
  } catch (error) {
    logger.log('Error fetching case study:', error)
    throw new Error(`Failed to fetch case study: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}
